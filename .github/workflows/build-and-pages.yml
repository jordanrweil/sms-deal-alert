# Updated workflow
name: Build email and publish assets
on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect package manager
        id: pm
        run: |
          if [ -f bun.lockb ]; then echo "pm=bun" >> $GITHUB_OUTPUT; exit 0; fi
          if [ -f pnpm-lock.yaml ]; then echo "pm=pnpm" >> $GITHUB_OUTPUT; exit 0; fi
          if [ -f yarn.lock ]; then echo "pm=yarn" >> $GITHUB_OUTPUT; exit 0; fi
          echo "pm=npm" >> $GITHUB_OUTPUT

      - name: Install deps
        run: |
          if [ "${{ steps.pm.outputs.pm }}" = "bun" ]; then
            curl -fsSL https://bun.sh/install | bash
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
            bun install
          elif [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then
            corepack enable
            pnpm i --frozen-lockfile
          elif [ "${{ steps.pm.outputs.pm }}" = "yarn" ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build
        env:
          VITE_BASE: "/${{ github.event.repository.name }}/"
        run: |
          if [ "${{ steps.pm.outputs.pm }}" = "bun" ]; then
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:$PATH"
            bun run build -- --base="${VITE_BASE}"
          elif [ "${{ steps.pm.outputs.pm }}" = "pnpm" ]; then
            pnpm run build -- --base="${VITE_BASE}"
          elif [ "${{ steps.pm.outputs.pm }}" = "yarn" ]; then
            yarn build --base "${VITE_BASE}" || yarn build
          else
            npm run build -- --base="${VITE_BASE}" || npm run build
          fi

      - name: Determine build output
        id: out
        run: |
          if [ -d dist ]; then echo "dir=dist" >> $GITHUB_OUTPUT; exit 0; fi
          if [ -d build ]; then echo "dir=build" >> $GITHUB_OUTPUT; exit 0; fi
          echo "No dist/ or build/ folder found"; exit 1

      - name: Prepare email-build (absolute URLs)
        run: |
          BASE="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          mkdir -p email-build
          cp -r "${{ steps.out.outputs.dir }}"/* email-build/
          find email-build -type f -name "*.html" -print0 | xargs -0 sed -i \
            -e "s|src=\"/|src=\"${BASE}/|g" \
            -e "s|href=\"/|href=\"${BASE}/|g" \
            -e "s|url(/|url(${BASE}/|g"

      - name: Commit compiled email
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add email-build || true
          git commit -m "Update compiled email HTML" || echo "No changes"
          git push || true

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: email-build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
